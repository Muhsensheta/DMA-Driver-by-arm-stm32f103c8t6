
DMA_ARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000450  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000580  08000588  00010588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000580  08000580  00010588  2**0
                  CONTENTS
  4 .ARM          00000000  08000580  08000580  00010588  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000580  08000588  00010588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000580  08000580  00010580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000584  08000584  00010584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000000  08000588  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08000588  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010588  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a3d  00000000  00000000  000105b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000058e  00000000  00000000  00010fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b0  00000000  00000000  00011580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000148  00000000  00000000  00011730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000352  00000000  00000000  00011878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000008b3  00000000  00000000  00011bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003a76  00000000  00000000  0001247d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00015ef3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000052c  00000000  00000000  00015f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000568 	.word	0x08000568

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000568 	.word	0x08000568

08000170 <main>:
#include	"DMA_interface.h"

u16 Count;

int	main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	f5ad 5d7a 	sub.w	sp, sp, #16000	; 0x3e80
 8000176:	b082      	sub	sp, #8
 8000178:	af00      	add	r7, sp, #0
	/*	Initialization Part		*/
	u32 Arr1[1000];
	u32 Arr2[1000] = {0};
 800017a:	f507 533a 	add.w	r3, r7, #11904	; 0x2e80
 800017e:	f103 0308 	add.w	r3, r3, #8
 8000182:	f6a3 7344 	subw	r3, r3, #3908	; 0xf44
 8000186:	4618      	mov	r0, r3
 8000188:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800018c:	461a      	mov	r2, r3
 800018e:	2100      	movs	r1, #0
 8000190:	f000 f9e2 	bl	8000558 <memset>
	u32 Arr3[1000];
	u32 Arr4[1000] = {0};
 8000194:	f607 6388 	addw	r3, r7, #3720	; 0xe88
 8000198:	f6a3 6384 	subw	r3, r3, #3716	; 0xe84
 800019c:	4618      	mov	r0, r3
 800019e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80001a2:	461a      	mov	r2, r3
 80001a4:	2100      	movs	r1, #0
 80001a6:	f000 f9d7 	bl	8000558 <memset>
	/*	Initialize the Array    */
	for(u16 i = 0; i<1000;i++)
 80001aa:	2300      	movs	r3, #0
 80001ac:	f507 527a 	add.w	r2, r7, #16000	; 0x3e80
 80001b0:	f102 0206 	add.w	r2, r2, #6
 80001b4:	8013      	strh	r3, [r2, #0]
 80001b6:	e02e      	b.n	8000216 <main+0xa6>
	{
		Arr1[i] = i;
 80001b8:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80001bc:	f103 0306 	add.w	r3, r3, #6
 80001c0:	881a      	ldrh	r2, [r3, #0]
 80001c2:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80001c6:	f103 0306 	add.w	r3, r3, #6
 80001ca:	8819      	ldrh	r1, [r3, #0]
 80001cc:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80001d0:	f103 0308 	add.w	r3, r3, #8
 80001d4:	f6a3 73a4 	subw	r3, r3, #4004	; 0xfa4
 80001d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		Arr3[i] = i;
 80001dc:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80001e0:	f103 0306 	add.w	r3, r3, #6
 80001e4:	881a      	ldrh	r2, [r3, #0]
 80001e6:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80001ea:	f103 0306 	add.w	r3, r3, #6
 80001ee:	8819      	ldrh	r1, [r3, #0]
 80001f0:	f507 53f4 	add.w	r3, r7, #7808	; 0x1e80
 80001f4:	f103 0308 	add.w	r3, r3, #8
 80001f8:	f6a3 63e4 	subw	r3, r3, #3812	; 0xee4
 80001fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(u16 i = 0; i<1000;i++)
 8000200:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8000204:	f103 0306 	add.w	r3, r3, #6
 8000208:	881b      	ldrh	r3, [r3, #0]
 800020a:	3301      	adds	r3, #1
 800020c:	f507 527a 	add.w	r2, r7, #16000	; 0x3e80
 8000210:	f102 0206 	add.w	r2, r2, #6
 8000214:	8013      	strh	r3, [r2, #0]
 8000216:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 800021a:	f103 0306 	add.w	r3, r3, #6
 800021e:	881b      	ldrh	r3, [r3, #0]
 8000220:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000224:	d3c8      	bcc.n	80001b8 <main+0x48>
	}
	/*	System Clk init			*/
	MRCC_voidSysClkInit();
 8000226:	f000 f8bd 	bl	80003a4 <MRCC_voidSysClkInit>
	
	/*	Toggle Led C13	GPIOC	*/
	/*	1- Enable Per Clk "RCC" Port C		*/
	MRCC_voidEnablePerClk(RCC_APB2,4);
 800022a:	2104      	movs	r1, #4
 800022c:	2002      	movs	r0, #2
 800022e:	f000 f8d5 	bl	80003dc <MRCC_voidEnablePerClk>
	/*	2- Enable Per Clk "RCC" DMA1		*/
	MRCC_voidEnablePerClk(RCC_AHB,0);
 8000232:	2100      	movs	r1, #0
 8000234:	2000      	movs	r0, #0
 8000236:	f000 f8d1 	bl	80003dc <MRCC_voidEnablePerClk>
	/*	Direction for C13 is output Push Pull */
	/*MDIO_voidSetPinDirection(PORTC, PIN13, OUT_2MHZ_PP);*/
	
		
	/*	NVIC Initialization		*/
	NVIC_void_Init();
 800023a:	f000 f879 	bl	8000330 <NVIC_void_Init>
	
	/*	DMA1 Channel1 NVIC interrupt Enable 	*/
	NVIC_void_EnableInt(11);
 800023e:	200b      	movs	r0, #11
 8000240:	f000 f884 	bl	800034c <NVIC_void_EnableInt>
	
	/*	DMA1 initilaization	*/
	DMA1_voidChannelInit();
 8000244:	f000 f83a 	bl	80002bc <DMA1_voidChannelInit>
	
	DMA1_voidChannelStart(Arr1,Arr2,1000);
 8000248:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 800024c:	f103 0308 	add.w	r3, r3, #8
 8000250:	3b04      	subs	r3, #4
 8000252:	f507 503b 	add.w	r0, r7, #11968	; 0x2ec0
 8000256:	f100 0024 	add.w	r0, r0, #36	; 0x24
 800025a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800025e:	4619      	mov	r1, r3
 8000260:	f000 f838 	bl	80002d4 <DMA1_voidChannelStart>
	
	for(Count = 0 ; Count<1000 ; Count++)
 8000264:	4b11      	ldr	r3, [pc, #68]	; (80002ac <main+0x13c>)
 8000266:	2200      	movs	r2, #0
 8000268:	801a      	strh	r2, [r3, #0]
 800026a:	e019      	b.n	80002a0 <main+0x130>
	{
		Arr4[Count] = Arr3[Count];
 800026c:	4b0f      	ldr	r3, [pc, #60]	; (80002ac <main+0x13c>)
 800026e:	881b      	ldrh	r3, [r3, #0]
 8000270:	461a      	mov	r2, r3
 8000272:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <main+0x13c>)
 8000274:	881b      	ldrh	r3, [r3, #0]
 8000276:	4619      	mov	r1, r3
 8000278:	f507 53f4 	add.w	r3, r7, #7808	; 0x1e80
 800027c:	f103 0308 	add.w	r3, r3, #8
 8000280:	f6a3 63e4 	subw	r3, r3, #3812	; 0xee4
 8000284:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000288:	f607 6388 	addw	r3, r7, #3720	; 0xe88
 800028c:	f6a3 6384 	subw	r3, r3, #3716	; 0xe84
 8000290:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	for(Count = 0 ; Count<1000 ; Count++)
 8000294:	4b05      	ldr	r3, [pc, #20]	; (80002ac <main+0x13c>)
 8000296:	881b      	ldrh	r3, [r3, #0]
 8000298:	3301      	adds	r3, #1
 800029a:	b29a      	uxth	r2, r3
 800029c:	4b03      	ldr	r3, [pc, #12]	; (80002ac <main+0x13c>)
 800029e:	801a      	strh	r2, [r3, #0]
 80002a0:	4b02      	ldr	r3, [pc, #8]	; (80002ac <main+0x13c>)
 80002a2:	881b      	ldrh	r3, [r3, #0]
 80002a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80002a8:	d3e0      	bcc.n	800026c <main+0xfc>
	}
	
	while(1)
 80002aa:	e7fe      	b.n	80002aa <main+0x13a>
 80002ac:	2000001c 	.word	0x2000001c

080002b0 <DMA1_Channel1_IRQHandler>:
	}
	return 0;
}

void DMA1_Channel1_IRQHandler(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	
	/*Clear GIF flag*/
	/*Clear TC flag*/
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr

080002bc <DMA1_voidChannelInit>:
#include"DMA_interface.h"



void	DMA1_voidChannelInit(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
		5- No circuler
		6- Direction Memory to memory (DIR = 0 , Src Peripheral, Des Memory) 
		7- Transfere complete interrupt
		0- Disable the channel
	*/
	DMA1 -> Channel[0].CCR = 0x00007AC2;
 80002c0:	4b03      	ldr	r3, [pc, #12]	; (80002d0 <DMA1_voidChannelInit+0x14>)
 80002c2:	f647 22c2 	movw	r2, #31426	; 0x7ac2
 80002c6:	609a      	str	r2, [r3, #8]
}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr
 80002d0:	40020000 	.word	0x40020000

080002d4 <DMA1_voidChannelStart>:
void	DMA1_voidChannelStart(u32 * SrcAdd,u32 * DesAdd,u16 BlockLength)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b085      	sub	sp, #20
 80002d8:	af00      	add	r7, sp, #0
 80002da:	60f8      	str	r0, [r7, #12]
 80002dc:	60b9      	str	r1, [r7, #8]
 80002de:	4613      	mov	r3, r2
 80002e0:	80fb      	strh	r3, [r7, #6]
	/*		Disable the Channel			*/
	CLR_BIT((DMA1 -> Channel[0].CCR),0);
 80002e2:	4b0d      	ldr	r3, [pc, #52]	; (8000318 <DMA1_voidChannelStart+0x44>)
 80002e4:	689b      	ldr	r3, [r3, #8]
 80002e6:	4a0c      	ldr	r2, [pc, #48]	; (8000318 <DMA1_voidChannelStart+0x44>)
 80002e8:	f023 0301 	bic.w	r3, r3, #1
 80002ec:	6093      	str	r3, [r2, #8]
	
	DMA1 -> Channel[0].CPAR = SrcAdd;
 80002ee:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <DMA1_voidChannelStart+0x44>)
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	6113      	str	r3, [r2, #16]
	DMA1 -> Channel[0].CMAR = DesAdd;
 80002f4:	4a08      	ldr	r2, [pc, #32]	; (8000318 <DMA1_voidChannelStart+0x44>)
 80002f6:	68bb      	ldr	r3, [r7, #8]
 80002f8:	6153      	str	r3, [r2, #20]
	DMA1 -> Channel[0].CNDTR = BlockLength;
 80002fa:	4a07      	ldr	r2, [pc, #28]	; (8000318 <DMA1_voidChannelStart+0x44>)
 80002fc:	88fb      	ldrh	r3, [r7, #6]
 80002fe:	60d3      	str	r3, [r2, #12]
	
	/*		Enable the Channel			*/
	SET_BIT((DMA1 -> Channel[0].CCR),0);
 8000300:	4b05      	ldr	r3, [pc, #20]	; (8000318 <DMA1_voidChannelStart+0x44>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	4a04      	ldr	r2, [pc, #16]	; (8000318 <DMA1_voidChannelStart+0x44>)
 8000306:	f043 0301 	orr.w	r3, r3, #1
 800030a:	6093      	str	r3, [r2, #8]
}
 800030c:	bf00      	nop
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40020000 	.word	0x40020000

0800031c <EXTI0_IRQHandler>:
	}
}

//External Peripherals
void	EXTI0_IRQHandler(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	EXTI0_CallBack(); // Ahmed();
 8000320:	4b02      	ldr	r3, [pc, #8]	; (800032c <EXTI0_IRQHandler+0x10>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4798      	blx	r3
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000020 	.word	0x20000020

08000330 <NVIC_void_Init>:
static void (*EXTI0_CallBack) (void) = NULL;
static void (*EXTI1_CallBack) (void) = NULL;


void NVIC_void_Init()
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
#ifndef SCB_AIRCR
#define  SCB_AIRCR    *((volatile u32*)(0xE000ED00+0x0C))
#endif
SCB_AIRCR	=	 NVIC_GRB_SUB_NUM;
 8000334:	4b03      	ldr	r3, [pc, #12]	; (8000344 <NVIC_void_Init+0x14>)
 8000336:	4a04      	ldr	r2, [pc, #16]	; (8000348 <NVIC_void_Init+0x18>)
 8000338:	601a      	str	r2, [r3, #0]
}
 800033a:	bf00      	nop
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	e000ed0c 	.word	0xe000ed0c
 8000348:	5fa00500 	.word	0x5fa00500

0800034c <NVIC_void_EnableInt>:

void NVIC_void_EnableInt(u8 IntNum)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	4603      	mov	r3, r0
 8000354:	71fb      	strb	r3, [r7, #7]
	if(IntNum<32)
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	2b1f      	cmp	r3, #31
 800035a:	d805      	bhi.n	8000368 <NVIC_void_EnableInt+0x1c>
	{
		NVIC_ISER0=(1<< IntNum);
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	2201      	movs	r2, #1
 8000360:	409a      	lsls	r2, r3
 8000362:	4b09      	ldr	r3, [pc, #36]	; (8000388 <NVIC_void_EnableInt+0x3c>)
 8000364:	601a      	str	r2, [r3, #0]
	else if(IntNum<64)
	{
		IntNum -=32;
			NVIC_ISER1=(1<<IntNum);
	}
}
 8000366:	e00a      	b.n	800037e <NVIC_void_EnableInt+0x32>
	else if(IntNum<64)
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	2b3f      	cmp	r3, #63	; 0x3f
 800036c:	d807      	bhi.n	800037e <NVIC_void_EnableInt+0x32>
		IntNum -=32;
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	3b20      	subs	r3, #32
 8000372:	71fb      	strb	r3, [r7, #7]
			NVIC_ISER1=(1<<IntNum);
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	2201      	movs	r2, #1
 8000378:	409a      	lsls	r2, r3
 800037a:	4b04      	ldr	r3, [pc, #16]	; (800038c <NVIC_void_EnableInt+0x40>)
 800037c:	601a      	str	r2, [r3, #0]
}
 800037e:	bf00      	nop
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr
 8000388:	e000e100 	.word	0xe000e100
 800038c:	e000e104 	.word	0xe000e104

08000390 <EXTI1_IRQHandler>:
	}
}

//External Peripherals
void	EXTI1_IRQHandler(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	EXTI1_CallBack();
 8000394:	4b02      	ldr	r3, [pc, #8]	; (80003a0 <EXTI1_IRQHandler+0x10>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4798      	blx	r3
}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	20000024 	.word	0x20000024

080003a4 <MRCC_voidSysClkInit>:




void	MRCC_voidSysClkInit(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
	#if			SYSTEM_CLK	==	RCC_HSI
				SET_BIT(RCC_CR,0);
 80003a8:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <MRCC_voidSysClkInit+0x30>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a09      	ldr	r2, [pc, #36]	; (80003d4 <MRCC_voidSysClkInit+0x30>)
 80003ae:	f043 0301 	orr.w	r3, r3, #1
 80003b2:	6013      	str	r3, [r2, #0]
				CLR_BIT(RCC_CFGR,0);
 80003b4:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <MRCC_voidSysClkInit+0x34>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a07      	ldr	r2, [pc, #28]	; (80003d8 <MRCC_voidSysClkInit+0x34>)
 80003ba:	f023 0301 	bic.w	r3, r3, #1
 80003be:	6013      	str	r3, [r2, #0]
				CLR_BIT(RCC_CFGR,1);
 80003c0:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <MRCC_voidSysClkInit+0x34>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a04      	ldr	r2, [pc, #16]	; (80003d8 <MRCC_voidSysClkInit+0x34>)
 80003c6:	f023 0302 	bic.w	r3, r3, #2
 80003ca:	6013      	str	r3, [r2, #0]
				CLR_BIT(RCC_CFGR,0);
				SET_BIT(RCC_CFGR,1);
	#else
		#error	"Wrong choice of RCC clock type"
	#endif
}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bc80      	pop	{r7}
 80003d2:	4770      	bx	lr
 80003d4:	40021000 	.word	0x40021000
 80003d8:	40021004 	.word	0x40021004

080003dc <MRCC_voidEnablePerClk>:
void	MRCC_voidEnablePerClk(u8 PerBus,u8 PerNum)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	460a      	mov	r2, r1
 80003e6:	71fb      	strb	r3, [r7, #7]
 80003e8:	4613      	mov	r3, r2
 80003ea:	71bb      	strb	r3, [r7, #6]
	/*	Range Check						*/
	if(PerNum<32)
 80003ec:	79bb      	ldrb	r3, [r7, #6]
 80003ee:	2b1f      	cmp	r3, #31
 80003f0:	d82a      	bhi.n	8000448 <MRCC_voidEnablePerClk+0x6c>
	{
		switch(PerBus)
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	2b02      	cmp	r3, #2
 80003f6:	d01c      	beq.n	8000432 <MRCC_voidEnablePerClk+0x56>
 80003f8:	2b02      	cmp	r3, #2
 80003fa:	dc25      	bgt.n	8000448 <MRCC_voidEnablePerClk+0x6c>
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d002      	beq.n	8000406 <MRCC_voidEnablePerClk+0x2a>
 8000400:	2b01      	cmp	r3, #1
 8000402:	d00b      	beq.n	800041c <MRCC_voidEnablePerClk+0x40>
			case RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerNum);	break;
		}
	}
	else
	{/*		Report Error 			*/}	
}
 8000404:	e020      	b.n	8000448 <MRCC_voidEnablePerClk+0x6c>
			case RCC_AHB	:	SET_BIT(RCC_AHBENR ,PerNum);	break;
 8000406:	4b13      	ldr	r3, [pc, #76]	; (8000454 <MRCC_voidEnablePerClk+0x78>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	79ba      	ldrb	r2, [r7, #6]
 800040c:	2101      	movs	r1, #1
 800040e:	fa01 f202 	lsl.w	r2, r1, r2
 8000412:	4611      	mov	r1, r2
 8000414:	4a0f      	ldr	r2, [pc, #60]	; (8000454 <MRCC_voidEnablePerClk+0x78>)
 8000416:	430b      	orrs	r3, r1
 8000418:	6013      	str	r3, [r2, #0]
 800041a:	e015      	b.n	8000448 <MRCC_voidEnablePerClk+0x6c>
			case RCC_APB1	:	SET_BIT(RCC_APB1ENR,PerNum);	break;
 800041c:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <MRCC_voidEnablePerClk+0x7c>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	79ba      	ldrb	r2, [r7, #6]
 8000422:	2101      	movs	r1, #1
 8000424:	fa01 f202 	lsl.w	r2, r1, r2
 8000428:	4611      	mov	r1, r2
 800042a:	4a0b      	ldr	r2, [pc, #44]	; (8000458 <MRCC_voidEnablePerClk+0x7c>)
 800042c:	430b      	orrs	r3, r1
 800042e:	6013      	str	r3, [r2, #0]
 8000430:	e00a      	b.n	8000448 <MRCC_voidEnablePerClk+0x6c>
			case RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerNum);	break;
 8000432:	4b0a      	ldr	r3, [pc, #40]	; (800045c <MRCC_voidEnablePerClk+0x80>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	79ba      	ldrb	r2, [r7, #6]
 8000438:	2101      	movs	r1, #1
 800043a:	fa01 f202 	lsl.w	r2, r1, r2
 800043e:	4611      	mov	r1, r2
 8000440:	4a06      	ldr	r2, [pc, #24]	; (800045c <MRCC_voidEnablePerClk+0x80>)
 8000442:	430b      	orrs	r3, r1
 8000444:	6013      	str	r3, [r2, #0]
 8000446:	bf00      	nop
}
 8000448:	bf00      	nop
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	40021014 	.word	0x40021014
 8000458:	4002101c 	.word	0x4002101c
 800045c:	40021018 	.word	0x40021018

08000460 <SysTick_Handler>:
	Local_u32RemainingTime =  (STK -> VAL);
	return Local_u32RemainingTime;
}
//Core Peripheral
void	SysTick_Handler(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
	u8 Local_u8Temp ;
	if(STK_u8ModeOfInterval == STK_SINGLE_INTERVAL)
 8000466:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <SysTick_Handler+0x50>)
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	2b02      	cmp	r3, #2
 800046c:	d111      	bne.n	8000492 <SysTick_Handler+0x32>
	{
		/*	1- Disable the Interrupt 	*/
			CLR_BIT(STK -> CTRL , 1);
 800046e:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <SysTick_Handler+0x54>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a10      	ldr	r2, [pc, #64]	; (80004b4 <SysTick_Handler+0x54>)
 8000474:	f023 0302 	bic.w	r3, r3, #2
 8000478:	6013      	str	r3, [r2, #0]
		/*	2- Stop the timer			*/
			CLR_BIT(STK -> CTRL , 0);
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <SysTick_Handler+0x54>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a0d      	ldr	r2, [pc, #52]	; (80004b4 <SysTick_Handler+0x54>)
 8000480:	f023 0301 	bic.w	r3, r3, #1
 8000484:	6013      	str	r3, [r2, #0]
			STK -> LOAD	= 0;
 8000486:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <SysTick_Handler+0x54>)
 8000488:	2200      	movs	r2, #0
 800048a:	605a      	str	r2, [r3, #4]
			STK -> VAL	= 0;
 800048c:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <SysTick_Handler+0x54>)
 800048e:	2200      	movs	r2, #0
 8000490:	609a      	str	r2, [r3, #8]
	}
	SysTick_CallBack();
 8000492:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <SysTick_Handler+0x58>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4798      	blx	r3
	/*	Clear Interrupt Flag by reading the Flag */
	Local_u8Temp	=	GET_BIT(STK -> CTRL , 16);
 8000498:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <SysTick_Handler+0x54>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	0c1b      	lsrs	r3, r3, #16
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	f003 0301 	and.w	r3, r3, #1
 80004a4:	71fb      	strb	r3, [r7, #7]
}
 80004a6:	bf00      	nop
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	2000002c 	.word	0x2000002c
 80004b4:	e000e010 	.word	0xe000e010
 80004b8:	20000028 	.word	0x20000028

080004bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004bc:	480d      	ldr	r0, [pc, #52]	; (80004f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c4:	480c      	ldr	r0, [pc, #48]	; (80004f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80004c6:	490d      	ldr	r1, [pc, #52]	; (80004fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80004c8:	4a0d      	ldr	r2, [pc, #52]	; (8000500 <LoopForever+0xe>)
  movs r3, #0
 80004ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004cc:	e002      	b.n	80004d4 <LoopCopyDataInit>

080004ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004d2:	3304      	adds	r3, #4

080004d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d8:	d3f9      	bcc.n	80004ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004da:	4a0a      	ldr	r2, [pc, #40]	; (8000504 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004dc:	4c0a      	ldr	r4, [pc, #40]	; (8000508 <LoopForever+0x16>)
  movs r3, #0
 80004de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e0:	e001      	b.n	80004e6 <LoopFillZerobss>

080004e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e4:	3204      	adds	r2, #4

080004e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e8:	d3fb      	bcc.n	80004e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ea:	f000 f811 	bl	8000510 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ee:	f7ff fe3f 	bl	8000170 <main>

080004f2 <LoopForever>:

LoopForever:
  b LoopForever
 80004f2:	e7fe      	b.n	80004f2 <LoopForever>
  ldr   r0, =_estack
 80004f4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80004f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004fc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000500:	08000588 	.word	0x08000588
  ldr r2, =_sbss
 8000504:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000508:	20000030 	.word	0x20000030

0800050c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800050c:	e7fe      	b.n	800050c <ADC1_2_IRQHandler>
	...

08000510 <__libc_init_array>:
 8000510:	b570      	push	{r4, r5, r6, lr}
 8000512:	2600      	movs	r6, #0
 8000514:	4d0c      	ldr	r5, [pc, #48]	; (8000548 <__libc_init_array+0x38>)
 8000516:	4c0d      	ldr	r4, [pc, #52]	; (800054c <__libc_init_array+0x3c>)
 8000518:	1b64      	subs	r4, r4, r5
 800051a:	10a4      	asrs	r4, r4, #2
 800051c:	42a6      	cmp	r6, r4
 800051e:	d109      	bne.n	8000534 <__libc_init_array+0x24>
 8000520:	f000 f822 	bl	8000568 <_init>
 8000524:	2600      	movs	r6, #0
 8000526:	4d0a      	ldr	r5, [pc, #40]	; (8000550 <__libc_init_array+0x40>)
 8000528:	4c0a      	ldr	r4, [pc, #40]	; (8000554 <__libc_init_array+0x44>)
 800052a:	1b64      	subs	r4, r4, r5
 800052c:	10a4      	asrs	r4, r4, #2
 800052e:	42a6      	cmp	r6, r4
 8000530:	d105      	bne.n	800053e <__libc_init_array+0x2e>
 8000532:	bd70      	pop	{r4, r5, r6, pc}
 8000534:	f855 3b04 	ldr.w	r3, [r5], #4
 8000538:	4798      	blx	r3
 800053a:	3601      	adds	r6, #1
 800053c:	e7ee      	b.n	800051c <__libc_init_array+0xc>
 800053e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000542:	4798      	blx	r3
 8000544:	3601      	adds	r6, #1
 8000546:	e7f2      	b.n	800052e <__libc_init_array+0x1e>
 8000548:	08000580 	.word	0x08000580
 800054c:	08000580 	.word	0x08000580
 8000550:	08000580 	.word	0x08000580
 8000554:	08000584 	.word	0x08000584

08000558 <memset>:
 8000558:	4603      	mov	r3, r0
 800055a:	4402      	add	r2, r0
 800055c:	4293      	cmp	r3, r2
 800055e:	d100      	bne.n	8000562 <memset+0xa>
 8000560:	4770      	bx	lr
 8000562:	f803 1b01 	strb.w	r1, [r3], #1
 8000566:	e7f9      	b.n	800055c <memset+0x4>

08000568 <_init>:
 8000568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800056a:	bf00      	nop
 800056c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800056e:	bc08      	pop	{r3}
 8000570:	469e      	mov	lr, r3
 8000572:	4770      	bx	lr

08000574 <_fini>:
 8000574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000576:	bf00      	nop
 8000578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800057a:	bc08      	pop	{r3}
 800057c:	469e      	mov	lr, r3
 800057e:	4770      	bx	lr
